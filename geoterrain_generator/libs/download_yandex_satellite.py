import math
import os
import sys
import urllib.request
from PIL import Image
import argparse
from dotenv import load_dotenv

TILE_SIZE = 512           # —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ç–∞–π–ª–∞ —É MapTiler
ZOOM = 18                 # –º–∞–∫—Å–∏–º—É–º ‚âà 0.6 –º/–ø–∏–∫—Å–µ–ª—å, –º–æ–∂–Ω–æ 17/16
TILESET = "satellite-v2"  # —Å–ø—É—Ç–Ω–∏–∫–æ–≤—ã–π —Å–ª–æ–π

load_dotenv()
API_KEY = os.getenv("MAPTILER_KEY")
if not API_KEY:
    print(" MAPTILER_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env")
    sys.exit(1)

def deg2num(lat, lon, zoom):
    """–®–∏—Ä–æ—Ç–∞-–¥–æ–ª–≥–æ—Ç–∞ –≤ tile –Ω–æ–º–µ—Ä–∞"""
    lat_rad = math.radians(lat)
    n = 2.0 ** zoom
    x = int((lon + 180.0) / 360.0 * n)
    y = int((1.0 - math.log(math.tan(lat_rad) + 1 / math.cos(lat_rad)) / math.pi) / 2.0 * n)
    return x, y

def num2deg(x, y, zoom):
    """Tile –Ω–æ–º–µ—Ä–∞ –≤ —à–∏—Ä–æ—Ç—É-–¥–æ–ª–≥–æ—Ç—É"""
    n = 2.0 ** zoom
    lon = x / n * 360.0 - 180.0
    lat_rad = math.atan(math.sinh(math.pi * (1 - 2 * y / n)))
    lat = math.degrees(lat_rad)
    return lat, lon

def download_tile(x, y, zoom, out_path):
    url = f"https://api.maptiler.com/tiles/{TILESET}/{zoom}/{x}/{y}.jpg?key={API_KEY}"
    urllib.request.urlretrieve(url, out_path)

def main(lat1, lon1, lat2, lon2, zoom=ZOOM, out_file="output.jpg"):
    lat_min, lat_max = min(lat1, lat2), max(lat1, lat2)
    lon_min, lon_max = min(lon1, lon2), max(lon1, lon2)

    x_min, y_max = deg2num(lat_min, lon_min, zoom)
    x_max, y_min = deg2num(lat_max, lon_max, zoom)

    tiles_x = x_max - x_min + 1
    tiles_y = y_max - y_min + 1
    total = tiles_x * tiles_y
    count = 0

    print(f"üì° –°–∫–∞—á–∏–≤–∞–µ–º {tiles_x}√ó{tiles_y} —Ç–∞–π–ª–æ–≤ (zoom {zoom})...")

    full_img = Image.new('RGB', (tiles_x * TILE_SIZE, tiles_y * TILE_SIZE))

    for x in range(x_min, x_max + 1):
        for y in range(y_min, y_max + 1):
            filename = f"tile_{x}_{y}.jpg"
            try:
                download_tile(x, y, zoom, filename)
                tile = Image.open(filename)
                i = x - x_min
                j = y - y_min
                full_img.paste(tile, (i * TILE_SIZE, j * TILE_SIZE))
                os.remove(filename)
            except Exception as e:
                print(f"\n‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ç–∞–π–ª–∞ {x},{y}: {e}")
            count += 1
            # –í—ã–≤–æ–¥–∏–º –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É
            print(f"\rüß© –ó–∞–≥—Ä—É–∂–µ–Ω–æ {count}/{total} —Ç–∞–π–ª–æ–≤ "
                  f"({(count / total * 100):.1f}%)", end='', flush=True)

    print()  # –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏ –ø–æ—Å–ª–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    full_img.save(out_file)
    print(f"‚úÖ –ì–æ—Ç–æ–≤–æ: —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ {out_file}")


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("lat1", type=float)
    parser.add_argument("lon1", type=float)
    parser.add_argument("lat2", type=float)
    parser.add_argument("lon2", type=float)
    parser.add_argument("output", type=str)
    parser.add_argument("--max_tiles", type=int, default=None,
                        help="–ú–∞–∫—Å–∏–º—É–º —Ç–∞–π–ª–æ–≤ (–∞–≤—Ç–æ–≤—ã–±–æ—Ä zoom)")
    args = parser.parse_args()

    lat1, lon1, lat2, lon2 = args.lat1, args.lon1, args.lat2, args.lon2

    # –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω –ª–∏–º–∏—Ç ‚Äî –ø–æ–¥–±–∏—Ä–∞–µ–º zoom
    if args.max_tiles is not None:
        for z in reversed(range(0, 21)):  # zoom 20...0
            x_min, y_max = deg2num(min(lat1, lat2), min(lon1, lon2), z)
            x_max, y_min = deg2num(max(lat1, lat2), max(lon1, lon2), z)
            count = (x_max - x_min + 1) * (y_max - y_min + 1)
            if count <= args.max_tiles:
                print(f"üîç –í—ã–±—Ä–∞–Ω zoom={z} (–≤—Å–µ–≥–æ {count} —Ç–∞–π–ª–æ–≤)")
                ZOOM = z
                break
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–æ–±—Ä–∞—Ç—å zoom –ø–æ–¥ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ —Ç–∞–π–ª–∞–º")
            sys.exit(1)

    main(lat1, lon1, lat2, lon2, zoom=ZOOM, out_file=args.output)

# Example: python .\geoterrain_generator\libs\download_yandex_satellite.py 54.924560, 36.897892 54.935001, 36.879245 area.jpeg --max_tiles 50
# Example: python .\geoterrain_generator\libs\download_yandex_satellite.py 54.947714, 36.930685 54.928758, 36.875809 area.jpeg --max_tiles 50